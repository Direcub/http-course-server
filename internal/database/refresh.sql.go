// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addRefresh = `-- name: AddRefresh :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1,
    NOW(),
    NOW(),
    $2,
    $3,
    NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

type AddRefreshParams struct {
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) AddRefresh(ctx context.Context, arg AddRefreshParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, addRefresh, arg.Token, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getRefresh = `-- name: GetRefresh :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens
where token = $1
`

func (q *Queries) GetRefresh(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefresh, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE refresh_tokens
SET revoked_at = $1, updated_at = $2
WHERE token = $3
`

type UpdateTokenParams struct {
	RevokedAt sql.NullTime `json:"revoked_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	Token     string       `json:"token"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken, arg.RevokedAt, arg.UpdatedAt, arg.Token)
	return err
}
