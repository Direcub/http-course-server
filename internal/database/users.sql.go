// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addJWT = `-- name: AddJWT :exec
UPDATE users
SET token = $1
WHERE id = $2
`

type AddJWTParams struct {
	Token string    `json:"token"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) AddJWT(ctx context.Context, arg AddJWTParams) error {
	_, err := q.db.ExecContext(ctx, addJWT, arg.Token, arg.ID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const findUserbyEmail = `-- name: FindUserbyEmail :one
SELECT id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) FindUserbyEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserbyEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT id, created_at, updated_at, email, hashed_password, token, refresh_token, is_chirpy_red FROM users
WHERE token = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.Token,
		&i.RefreshToken,
		&i.IsChirpyRed,
	)
	return i, err
}

const makeRed = `-- name: MakeRed :exec
UPDATE users
SET is_chirpy_red = true
WHERE id = $1
`

func (q *Queries) MakeRed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, makeRed, id)
	return err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const updateCredentials = `-- name: UpdateCredentials :exec
UPDATE users
SET email = $1, hashed_password = $2
WHERE id = $3
`

type UpdateCredentialsParams struct {
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
	ID             uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCredentials(ctx context.Context, arg UpdateCredentialsParams) error {
	_, err := q.db.ExecContext(ctx, updateCredentials, arg.Email, arg.HashedPassword, arg.ID)
	return err
}
